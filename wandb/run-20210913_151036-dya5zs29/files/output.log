C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\torch\utils\data\_utils\collate.py:64: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ..\torch\csrc\utils\tensor_numpy.cpp:180.)
  return default_collate([torch.as_tensor(b) for b in batch])
Evaluating trajectory 1
    evaluation mse loss
    tensor(8.2658, device='cuda:0')
    evaluation l1 loss
    tensor(1.9953, device='cuda:0')
Evaluating trajectory 2
    evaluation mse loss
    tensor(9.0241, device='cuda:0')
    evaluation l1 loss
    tensor(2.3167, device='cuda:0')
Evaluating trajectory 3
    evaluation mse loss
    tensor(3.4449, device='cuda:0')
    evaluation l1 loss
    tensor(1.4620, device='cuda:0')
Evaluating trajectory 4
    evaluation mse loss
    tensor(0.0129, device='cuda:0')
    evaluation l1 loss
    tensor(0.0836, device='cuda:0')
Evaluating trajectory 5
Traceback (most recent call last):
  File "C:\Users\Mark\iCloudDrive\master_arbeit\implementation\meshgraphnets\run_model.py", line 316, in <module>
    app.run(main)
  File "C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\absl\app.py", line 312, in run
    _run_main(main, args)
  File "C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\absl\app.py", line 258, in _run_main
    sys.exit(main(argv))
  File "C:\Users\Mark\iCloudDrive\master_arbeit\implementation\meshgraphnets\run_model.py", line 273, in main
    evaluator(params, model)
  File "C:\Users\Mark\iCloudDrive\master_arbeit\implementation\meshgraphnets\run_model.py", line 224, in evaluator
    _, prediction_trajectory = params['evaluator'].evaluate(model, trajectory)
  File "C:\Users\Mark\iCloudDrive\master_arbeit\implementation\meshgraphnets\cloth_eval.py", line 79, in evaluate
    prediction = _rollout(model, initial_state, num_steps)
  File "C:\Users\Mark\iCloudDrive\master_arbeit\implementation\meshgraphnets\cloth_eval.py", line 71, in _rollout
    prev_pos, cur_pos, trajectory = step_fn(prev_pos, cur_pos, trajectory)
  File "C:\Users\Mark\iCloudDrive\master_arbeit\implementation\meshgraphnets\cloth_eval.py", line 35, in step_fn
    prediction = model({**initial_state,
  File "C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\torch\nn\modules\module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "C:\Users\Mark\iCloudDrive\master_arbeit\implementation\meshgraphnets\cloth_model.py", line 82, in forward
    return self._update(inputs, self.learned_model(graph))
  File "C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\torch\nn\modules\module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "C:\Users\Mark\iCloudDrive\master_arbeit\implementation\meshgraphnets\encode_process_decode.py", line 243, in forward
    latent_graph = self._processor(latent_graph)
  File "C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\torch\nn\modules\module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "C:\Users\Mark\iCloudDrive\master_arbeit\implementation\meshgraphnets\encode_process_decode.py", line 208, in forward
    return self._submodules(graph)
  File "C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\torch\nn\modules\module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\torch\nn\modules\container.py", line 139, in forward
    input = module(input)
  File "C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\torch\nn\modules\module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "C:\Users\Mark\iCloudDrive\master_arbeit\implementation\meshgraphnets\encode_process_decode.py", line 148, in forward
    new_node_features = self._update_node_features(graph.node_features, new_edge_sets)
  File "C:\Users\Mark\iCloudDrive\master_arbeit\implementation\meshgraphnets\encode_process_decode.py", line 137, in _update_node_features
    return self._node_model(features)
  File "C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\torch\nn\modules\module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\torch\nn\modules\container.py", line 139, in forward
    input = module(input)
  File "C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\torch\nn\modules\module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "C:\Users\Mark\iCloudDrive\master_arbeit\implementation\meshgraphnets\encode_process_decode.py", line 44, in forward
    y = self.layers(input)
  File "C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\torch\nn\modules\module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\torch\nn\modules\container.py", line 139, in forward
    input = module(input)
  File "C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\torch\nn\modules\module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\torch\nn\modules\linear.py", line 96, in forward
    return F.linear(input, self.weight, self.bias)
  File "C:\Users\Mark\anaconda3\envs\tf2_mgn4\lib\site-packages\torch\nn\functional.py", line 1847, in linear
    return torch._C._nn.linear(input, weight, bias)
KeyboardInterrupt